{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nvar subpagesDirectory = path.join(process.cwd(), 'subpages'); // update dates later maybe?\n\nexport function getSortedSubpagesData() {\n  // Get file names under /subpages\n  var fileNames = fs.readdirSync(subpagesDirectory);\n  var allSubpagesData = fileNames.map(function (fileName) {\n    // Remove \".md\" from file name to get id\n    var id = fileName.replace(/\\.md$/, ''); // Read markdown file as string\n\n    var fullPath = path.join(subpagesDirectory, fileName);\n    var fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n    var matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id: id\n    }, matterResult.data);\n  }); // Sort posts by date\n\n  return allSubpagesData.sort(function (a, b) {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllSubpageIds() {\n  var fileNames = fs.readdirSync(subpagesDirectory); // Returns an array that looks like this:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n\n  return fileNames.map(function (fileName) {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport function getSubpageData(_x) {\n  return _getSubpageData.apply(this, arguments);\n}\n\nfunction _getSubpageData() {\n  _getSubpageData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n    var fullPath, fileContents, matterResult, processedContent, contentHtml;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // async used for `await`\n            fullPath = path.join(subpagesDirectory, \"\".concat(id, \".md\"));\n            fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n            matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n            _context.next = 5;\n            return remark().use(html).process(matterResult.content);\n\n          case 5:\n            processedContent = _context.sent;\n            contentHtml = processedContent.toString(); // Combine the data with the id and contentHtml\n\n            return _context.abrupt(\"return\", _objectSpread({\n              id: id,\n              contentHtml: contentHtml\n            }, matterResult.data));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getSubpageData.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/james/Documents/programs/james168ma.github.io/lib/subpages.js"],"names":["path","matter","remark","html","subpagesDirectory","join","process","cwd","getSortedSubpagesData","fileNames","fs","readdirSync","allSubpagesData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date","getAllSubpageIds","params","getSubpageData","use","content","processedContent","contentHtml","toString"],"mappings":";;;;;;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,IAAMC,iBAAiB,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,UAAzB,CAA1B,C,CAEA;;AACA,OAAO,SAASC,qBAAT,GAAiC;AACtC;AACA,MAAMC,SAAS,GAAGC,EAAE,CAACC,WAAH,CAAeP,iBAAf,CAAlB;AACA,MAAMQ,eAAe,GAAGH,SAAS,CAACI,GAAV,CAAc,UAAAC,QAAQ,EAAI;AAChD;AACA,QAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAFgD,CAIhD;;AACA,QAAMC,QAAQ,GAAGjB,IAAI,CAACK,IAAL,CAAUD,iBAAV,EAA6BU,QAA7B,CAAjB;AACA,QAAMI,YAAY,GAAGR,EAAE,CAACS,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CANgD,CAQhD;;AACA,QAAMG,YAAY,GAAGnB,MAAM,CAACiB,YAAD,CAA3B,CATgD,CAWhD;;AACA;AACIH,MAAAA,EAAE,EAAFA;AADJ,OAEOK,YAAY,CAACC,IAFpB;AAID,GAhBuB,CAAxB,CAHsC,CAoBtC;;AACA,SAAOT,eAAe,CAACU,IAAhB,CAAqB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACpC,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GANM,CAAP;AAOD;AAED,OAAO,SAASC,gBAAT,GAA4B;AACjC,MAAMjB,SAAS,GAAGC,EAAE,CAACC,WAAH,CAAeP,iBAAf,CAAlB,CADiC,CAGjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAOK,SAAS,CAACI,GAAV,CAAc,UAAAC,QAAQ,EAAI;AAC/B,WAAO;AACLa,MAAAA,MAAM,EAAE;AACNZ,QAAAA,EAAE,EAAED,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAQD;AAED,gBAAsBY,cAAtB;AAAA;AAAA;;;6EAAO,iBAA8Bb,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoC;AACnCE,YAAAA,QADD,GACYjB,IAAI,CAACK,IAAL,CAAUD,iBAAV,YAAgCW,EAAhC,SADZ;AAECG,YAAAA,YAFD,GAEgBR,EAAE,CAACS,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAFhB,EAIL;;AACMG,YAAAA,YALD,GAKgBnB,MAAM,CAACiB,YAAD,CALtB,EAOL;;AAPK;AAAA,mBAQ0BhB,MAAM,GAClC2B,GAD4B,CACxB1B,IADwB,EAE5BG,OAF4B,CAEpBc,YAAY,CAACU,OAFO,CAR1B;;AAAA;AAQCC,YAAAA,gBARD;AAWCC,YAAAA,WAXD,GAWeD,gBAAgB,CAACE,QAAjB,EAXf,EAaL;;AAbK;AAeHlB,cAAAA,EAAE,EAAFA,EAfG;AAgBHiB,cAAAA,WAAW,EAAXA;AAhBG,eAiBAZ,YAAY,CAACC,IAjBb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import path from 'path'\nimport matter from 'gray-matter'\nimport remark from 'remark'\nimport html from 'remark-html'\n\nconst subpagesDirectory = path.join(process.cwd(), 'subpages')\n\n// update dates later maybe?\nexport function getSortedSubpagesData() {\n  // Get file names under /subpages\n  const fileNames = fs.readdirSync(subpagesDirectory)\n  const allSubpagesData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, '')\n\n    // Read markdown file as string\n    const fullPath = path.join(subpagesDirectory, fileName)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n    // Use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents)\n\n    // Combine the data with the id\n    return {\n        id,\n        ...matterResult.data\n    }\n  })\n  // Sort posts by date\n  return allSubpagesData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1\n    } else {\n      return -1\n    }\n  })\n}\n\nexport function getAllSubpageIds() {\n  const fileNames = fs.readdirSync(subpagesDirectory)\n\n  // Returns an array that looks like this:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    }\n  })\n\n}\n\nexport async function getSubpageData(id) { // async used for `await`\n  const fullPath = path.join(subpagesDirectory, `${id}.md`)\n  const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n  // Use gray-matter to parse the post metadata section\n  const matterResult = matter(fileContents)\n\n  // Use remark to convert markdown into HTML string\n  const processedContent = await remark()\n    .use(html)\n    .process(matterResult.content)\n  const contentHtml = processedContent.toString()\n\n  // Combine the data with the id and contentHtml\n  return {\n    id,\n    contentHtml,\n    ...matterResult.data\n  }\n}\n"]},"metadata":{},"sourceType":"module"}