{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nconst subpagesDirectory = 'subpages';\nexport function getSortedPostsData() {\n  // Get file names under /posts\n  const fileNames = fs.readdirSync(subpagesDirectory);\n  const allSubpagesData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace('.md', '');\n    const markdownWithMetaData = fs.readFileSync(path.join(subpagesDirectory, id + \".md\"));\n    const parsedMarkdown = matter(markdownWithMetaData); // Combine the data with the id\n\n    return _objectSpread({\n      id\n    }, parsedMarkdown.data);\n  }); // Sort posts by date\n\n  const sortedSubpages = allSubpagesData.sort((a, b) => {\n    if (a.priority > b.priority) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n  return sortedSubpages.map(sortedSubpage => sortedSubpage.id);\n}","map":{"version":3,"sources":["/Users/james/Documents/Programs/james168ma.github.io/lib/subpages.js"],"names":["fs","path","matter","remark","html","subpagesDirectory","getSortedPostsData","fileNames","readdirSync","allSubpagesData","map","fileName","id","replace","markdownWithMetaData","readFileSync","join","parsedMarkdown","data","sortedSubpages","sort","a","b","priority","sortedSubpage"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,MAAMC,iBAAiB,GAAG,UAA1B;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACnC;AACA,QAAMC,SAAS,GAAGP,EAAE,CAACQ,WAAH,CAAeH,iBAAf,CAAlB;AAEA,QAAMI,eAAe,GAAGF,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAI;AAChD;AACA,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,CAAX;AACA,UAAMC,oBAAoB,GAAGd,EAAE,CAACe,YAAH,CAAgBd,IAAI,CAACe,IAAL,CAAUX,iBAAV,EAA6BO,EAAE,GAAG,KAAlC,CAAhB,CAA7B;AAEA,UAAMK,cAAc,GAAGf,MAAM,CAACY,oBAAD,CAA7B,CALgD,CAOhD;;AACA;AACIF,MAAAA;AADJ,OAEOK,cAAc,CAACC,IAFtB;AAID,GAZuB,CAAxB,CAJmC,CAiBnC;;AACA,QAAMC,cAAc,GAAGV,eAAe,CAACW,IAAhB,CAAqB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACpD,QAAID,CAAC,CAACE,QAAF,GAAaD,CAAC,CAACC,QAAnB,EAA6B;AAC3B,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GANsB,CAAvB;AAQA,SAAOJ,cAAc,CAACT,GAAf,CAAmBc,aAAa,IAAIA,aAAa,CAACZ,EAAlD,CAAP;AACD","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\nimport remark from 'remark'\nimport html from 'remark-html'\n\nconst subpagesDirectory = 'subpages'\n\nexport function getSortedPostsData() {\n  // Get file names under /posts\n  const fileNames = fs.readdirSync(subpagesDirectory)\n\n  const allSubpagesData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace('.md', '')\n    const markdownWithMetaData = fs.readFileSync(path.join(subpagesDirectory, id + \".md\"))\n\n    const parsedMarkdown = matter(markdownWithMetaData)\n\n    // Combine the data with the id\n    return {\n        id,\n        ...parsedMarkdown.data\n    }\n  })\n  // Sort posts by date\n  const sortedSubpages = allSubpagesData.sort((a, b) => {\n    if (a.priority > b.priority) {\n      return 1\n    } else {\n      return -1\n    }\n  })\n\n  return sortedSubpages.map(sortedSubpage => sortedSubpage.id)\n}\n"]},"metadata":{},"sourceType":"module"}